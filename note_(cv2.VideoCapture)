首先，与torchvision有版本冲突的是opencv库，opencv-python与torchvision并无不兼容问题，可以直接pip install opencv-python使用cv2。

这里主要记录cv2中read和write视频文件的心得：

一. 首先是read video

1. capture_instance: 通过cv2.VideoRead(filename: str)可以得到该视频文件的对象，同时capture_instance.is_Opened()返回True，说明
该捕捉视频对象已经开启（注意在任务最后通过capture_instance.release()释放该对象，capture_instance被释放后，capture_instance.is_Opened()
将返回False。接着可以通过重复capture_instance.read()操作来读取视频中每一帧图像的像素值，这里需要注意的是，
  1.1： 对于同一个capture_instance，每进行一次capture_instance.read()操作，下次进行同操作时就会自动读取下一帧，是一个不可逆过程。
  
  1.2： capture_instance.read()将返回两个值，一个为bool值，我们称之为ret，如果本帧读取无误，则ret = True，反之如果本帧读取失败（包括
视频已经读取结束的情况），则ret = False。另一个则是该帧的像素ndarray（默认为3d，BGR排列），我们这里称之为frame。

  1.3： cv2读取到的视频每一帧frame，像素通道都是按照BGR排列的，所以如果习惯RGB顺序的话，可以通过
frame_adjusted = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)操作调整通道顺序。
        同时，通过cv2读取到的每一帧frame，ndarray的dimension都是(height, width, channel)顺序的，所以如果喜欢channel在前的话，需要
自己调整。

  1.4： cv2.imshow("window_name", frame_adjusted)可以产生一个窗口去展示通道被调整过后的帧图。这个窗口将会持续x秒，x是cv.waitKey(x)
中的参数，x的单位为千分之一秒。
  也就是说，按照如下code：
  cv2.imshow("name", frame_adjusted);
  cv2.waitKey(1000);
  cv2.release(capture_instance)
  cv2.DestroyAllWindows()
  将会产生一个持续一秒钟的窗口来展示frame_adjusted
  
  1.5：如果想通过一个窗口来连续展示视频中的每一帧，则可以按照以下代码：
  capture_instance = cv2.VideoRead("video_name.avi");
  capture_frame_count = int(capture_instance.get(cv2.CAP_PROP_FRAME_COUNT));
  current_frame = 0
  
  while (capture_instance.is_opened()):
    ret, frame = capture_instance.read()
    
    if not ret:
      print("The last frame of this video has been read; Or there is something wrong when reading this frame.");
      break;
      
    frame_adjusted = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY);
    cv2.imshow("window_name", frame_adjusted);
    cv2.waitKey(1000); # display window for 1 sec
    
    if current_frame == capture_frame_count - 1:
      break;
    
    current_frame += 1;
  
  capture_instance.release(); # close the opened capture_instance, now the capture_instance.is_Opened() return a False value
  cv2.destroyAllWindows(); # destroy the windows to display images.
  
  1.6：想通过cv2.imshow()展示三通道的图片时，需要将ndarray通过ndarray.transpose((1, 2, 0)) 转换为(height, width, channel)的dimension
  


二. 接着是将ndarray写成video

  该步骤的主要流程为，创建一个Video_Writer的instance，接着使用该instance的write()方法来循环将每一帧dimension为：height, width, channels的
frame(ndarray)写入至指定的目录。这里的channel顺序需要调整为BGR
  Common code:
  # if video_array is in dimension: channel, frames, height, width
  c, _, height, width = video_array.shape
  
  # determine the fourcc which would determine the type of video file
  fourcc = cv2.VideoWriter_fourcc(*"MJPG") # or cv2.VideoWriter_fourcc('M', 'J', 'P', 'G'), would create a .mp4 video file
  
  # create the instance of VideoWriter:
  out = cv2.VideoWriter(filename, fourcc, fps, (height, width)) # filename is the path for output video
  
  for frame in video_array.transpose((1, 2, 3, 0)):
    frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
    out.write(frame)
   
  out.release()
